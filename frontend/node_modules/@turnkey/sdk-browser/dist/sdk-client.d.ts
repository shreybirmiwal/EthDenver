import { KeyFormat } from "@turnkey/iframe-stamper";
import type { TurnkeySDKClientConfig, TurnkeySDKBrowserConfig, IframeClientParams } from "./__types__/base";
import { TurnkeySDKClientBase } from "./__generated__/sdk-client-base";
import type * as SdkApiTypes from "./__generated__/sdk_api_types";
import type { User, SubOrganization, ReadWriteSession, Passkey } from "./models";
export declare class TurnkeyBrowserSDK {
    config: TurnkeySDKBrowserConfig;
    constructor(config: TurnkeySDKBrowserConfig);
    passkeyClient: (rpId?: string) => TurnkeyPasskeyClient;
    iframeClient: (params: IframeClientParams) => Promise<TurnkeyIframeClient>;
    serverSign: <TResponseType>(methodName: string, params: any[], serverSignUrl?: string) => Promise<TResponseType>;
    /**
     * If there is a valid, current user session, this will return a read-enabled TurnkeyBrowserClient that can make read requests to Turnkey without additional authentication. This is powered by a session header resulting from a prior successful `login` call.
     *
     * @returns {Promise<TurnkeyBrowserClient | undefined>}
     */
    currentUserSession: () => Promise<TurnkeyBrowserClient | undefined>;
    /**
     * If there is a valid, current read-session, this will return an auth bundle and its expiration. This auth bundle can be used in conjunction with an iframeStamper to create a read + write session.
     *
     * @returns {Promise<ReadWriteSession | undefined>}
     */
    getReadWriteSession: () => Promise<ReadWriteSession | undefined>;
    /**
     * Fetches an auth bundle stored in local storage.
     *
     * @returns {Promise<string | undefined>}
     */
    getAuthBundle: () => Promise<string | undefined>;
    /**
     * Fetches the current user's organization details.
     *
     * @returns {Promise<SubOrganization | undefined>}
     */
    getCurrentSubOrganization: () => Promise<SubOrganization | undefined>;
    /**
     * Fetches the currently active user.
     *
     * @returns {Promise<User | undefined>}
     */
    getCurrentUser: () => Promise<User | undefined>;
    /**
     * Clears out all data pertaining to a user session.
     *
     * @returns {Promise<boolean>}
     */
    logoutUser: () => Promise<boolean>;
}
export declare class TurnkeyBrowserClient extends TurnkeySDKClientBase {
    constructor(config: TurnkeySDKClientConfig);
    login: (config?: {
        organizationId?: string;
    }) => Promise<SdkApiTypes.TCreateReadOnlySessionResponse>;
    /**
     * Creates a read-write session. This method infers the current user's organization ID and target userId. To be used in conjunction with an `iframeStamper`: the resulting session's credential bundle can be injected into an iframeStamper to create a session that enables both read and write requests.
     *
     * @param email
     * @param targetEmbeddedKey
     * @param expirationSeconds
     * @returns {Promise<SdkApiTypes.TCreateReadWriteSessionResponse>}
     */
    loginWithReadWriteSession: (targetEmbeddedKey: string, expirationSeconds?: string, userId?: string) => Promise<SdkApiTypes.TCreateReadWriteSessionResponse>;
}
export declare class TurnkeyPasskeyClient extends TurnkeyBrowserClient {
    rpId: string;
    constructor(config: TurnkeySDKClientConfig);
    /**
     * Create a passkey for an end-user, taking care of various lower-level details.
     *
     * @returns {Promise<Passkey>}
     */
    createUserPasskey: (config?: Record<any, any>) => Promise<Passkey>;
    /**
     * Uses passkey authentication to create a read-write session, via an embedded API key, and stores + returns the resulting auth bundle that contains the encrypted API key. This auth bundle (also referred to as a credential bundle) can be injected into an iframeStamper, resulting in a touch-free authenticator. Unlike `loginWithReadWriteSession`, this method assumes the end-user's organization ID (i.e. the sub-organization ID) is already known.
     *
     * @param userId
     * @param targetEmbeddedKey
     * @param expirationSeconds
     * @param curveType
     * @returns {Promise<ReadWriteSession>}
     */
    createPasskeySession: (userId: string, targetEmbeddedKey: string, expirationSeconds?: string, organizationId?: string) => Promise<ReadWriteSession>;
}
export declare class TurnkeyIframeClient extends TurnkeyBrowserClient {
    iframePublicKey: string | null;
    constructor(config: TurnkeySDKClientConfig);
    injectCredentialBundle: (credentialBundle: string) => Promise<boolean>;
    injectWalletExportBundle: (credentialBundle: string, organizationId: string) => Promise<boolean>;
    injectKeyExportBundle: (credentialBundle: string, organizationId: string, keyFormat?: KeyFormat | undefined) => Promise<boolean>;
    injectImportBundle: (bundle: string, organizationId: string, userId: string) => Promise<boolean>;
    extractWalletEncryptedBundle: () => Promise<string>;
    extractKeyEncryptedBundle: () => Promise<string>;
}
//# sourceMappingURL=sdk-client.d.ts.map